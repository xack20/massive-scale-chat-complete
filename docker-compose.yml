version: '3.8'

services:
  # Infrastructure Services
  postgresql:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: chatapp
      POSTGRES_USER: chatuser
      POSTGRES_PASSWORD: chatpass123
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - chat-network

  mongodb:
    image: mongo:7
    environment:
      MONGO_INITDB_ROOT_USERNAME: chatuser
      MONGO_INITDB_ROOT_PASSWORD: chatpass123
      MONGO_INITDB_DATABASE: chatapp
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - chat-network

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass chatpass123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - chat-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - chat-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - chat-network

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
    volumes:
      - minio_data:/data
    networks:
      - chat-network

  # Load Balancer
  haproxy:
    image: haproxy:2.8
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - ./infrastructure/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    depends_on:
      - api-gateway
      - user-service
      - message-service
      - file-service
      - notification-service
      - presence-service
    networks:
      - chat-network

  # Microservices
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      POSTGRES_URL: postgresql://chatuser:chatpass123@postgresql:5432/chatapp
      REDIS_URL: redis://redis:6379
      REDIS_PASSWORD: chatpass123
      JWT_SECRET: your-jwt-secret-here-change-in-production
      USER_SERVICE_URL: http://user-service:3001
      MESSAGE_SERVICE_URL: http://message-service:3002
      FILE_SERVICE_URL: http://file-service:3003
      NOTIFICATION_SERVICE_URL: http://notification-service:3004
      PRESENCE_SERVICE_URL: http://presence-service:3005
    depends_on:
      - postgresql
      - redis
      - kafka
    networks:
      - chat-network

  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://chatuser:chatpass123@postgresql:5432/chatapp
      REDIS_URL: redis://redis:6379
      REDIS_PASSWORD: chatpass123
      JWT_SECRET: your-jwt-secret-here-change-in-production
      KAFKA_BROKERS: kafka:29092
    depends_on:
      - postgresql
      - redis
      - kafka
    networks:
      - chat-network

  message-service:
    build:
      context: ./services/message-service
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: development
      PORT: 3002
      MONGODB_URL: mongodb://chatuser:chatpass123@mongodb:27017/chatapp
      REDIS_URL: redis://redis:6379
      REDIS_PASSWORD: chatpass123
      KAFKA_BROKERS: kafka:29092
      JWT_SECRET: your-jwt-secret-here-change-in-production
    depends_on:
      - mongodb
      - redis
      - kafka
    networks:
      - chat-network

  file-service:
    build:
      context: ./services/file-service
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: development
      PORT: 3003
      MONGODB_URL: mongodb://chatuser:chatpass123@mongodb:27017/chatapp
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      MINIO_BUCKET: chat-files
      JWT_SECRET: your-jwt-secret-here-change-in-production
      MAX_FILE_SIZE: 50MB
    depends_on:
      - mongodb
      - minio
    networks:
      - chat-network

  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    ports:
      - "3004:3004"
    environment:
      NODE_ENV: development
      PORT: 3004
      REDIS_URL: redis://redis:6379
      REDIS_PASSWORD: chatpass123
      KAFKA_BROKERS: kafka:29092
      JWT_SECRET: your-jwt-secret-here-change-in-production
      EMAIL_SERVICE: sendgrid
      SENDGRID_API_KEY: your-sendgrid-api-key
      PUSH_SERVICE: firebase
      FIREBASE_SERVER_KEY: your-firebase-server-key
    depends_on:
      - redis
      - kafka
    networks:
      - chat-network

  presence-service:
    build:
      context: ./services/presence-service
      dockerfile: Dockerfile
    ports:
      - "3005:3005"
    environment:
      NODE_ENV: development
      PORT: 3005
      REDIS_URL: redis://redis:6379
      REDIS_PASSWORD: chatpass123
      KAFKA_BROKERS: kafka:29092
      JWT_SECRET: your-jwt-secret-here-change-in-production
    depends_on:
      - redis
      - kafka
    networks:
      - chat-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3006:3000"
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost/api
      NEXT_PUBLIC_WS_URL: ws://localhost/ws
      NEXT_PUBLIC_FILE_UPLOAD_URL: http://localhost/api/files
    depends_on:
      - api-gateway
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - chat-network

volumes:
  postgres_data:
  mongo_data:
  redis_data:
  minio_data:

networks:
  chat-network:
    driver: bridge