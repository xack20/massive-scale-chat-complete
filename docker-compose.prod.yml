version: '3.8'

services:
  # Infrastructure Services
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - chat-network
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 1G

  mongodb:
    image: mongo:7
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    volumes:
      - mongodb_data:/data/db
    networks:
      - chat-network
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 2G

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - chat-network
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M

  kafka:
    image: confluentinc/cp-kafka:latest
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
    depends_on:
      - zookeeper
    networks:
      - chat-network
    deploy:
      replicas: 3

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - chat-network

  # Load Balancer
  haproxy:
    build:
      context: ./infrastructure/load-balancer
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - gateway-service
    networks:
      - chat-network
    deploy:
      replicas: 2

  # Application Services
  gateway-service:
    build:
      context: ./services/gateway-service
      target: production
    environment:
      - NODE_ENV=production
      - REDIS_URL=${REDIS_URL}
      - KAFKA_BROKERS=${KAFKA_BROKERS}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - chat-network
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 512M

  user-service:
    build:
      context: ./services/user-service
      target: production
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - chat-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M

  message-service:
    build:
      context: ./services/message-service
      target: production
    environment:
      - NODE_ENV=production
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_URL=${REDIS_URL}
      - KAFKA_BROKERS=${KAFKA_BROKERS}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - chat-network
    deploy:
      replicas: 4
      resources:
        limits:
          memory: 1G

  file-service:
    build:
      context: ./services/file-service
      target: production
    environment:
      - NODE_ENV=production
      - JWT_SECRET=${JWT_SECRET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
    networks:
      - chat-network
    deploy:
      replicas: 2

  notification-service:
    build:
      context: ./services/notification-service
      target: production
    environment:
      - NODE_ENV=production
      - MONGODB_URI=${MONGODB_URI}
      - KAFKA_BROKERS=${KAFKA_BROKERS}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - chat-network
    deploy:
      replicas: 2

  presence-service:
    build:
      context: ./services/presence-service
      target: production
    environment:
      - NODE_ENV=production
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - chat-network
    deploy:
      replicas: 2

  # Frontend
  frontend:
    build:
      context: ./frontend
      target: production
    environment:
      - NEXT_PUBLIC_API_URL=${API_URL}
      - NEXT_PUBLIC_WEBSOCKET_URL=${WEBSOCKET_URL}
    networks:
      - chat-network
    deploy:
      replicas: 2

networks:
  chat-network:
    driver: overlay
    attachable: true

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
